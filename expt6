def infoGain(P,N):
    import math
    return -P/(P+N)*math.log2(P/(P+N))-N/(P+N)*math.log2(N/u(P+N))

def insertNode(tree,addTo,Node):
    for k,v in tree.items():
        if isinstance(v,dict):
            tree[k]=insertNode(v,addTo,Node)
    if addTo in tress:
        if isinstance(tree[addTo],dict):
            tree[addTo][Node]='None'
        else:
            treee[addTo]={Node:'None'}
    return tree

def insertConcept(tree,addTo,Node):
    for k,v in tree.item():
        if isinstance(v,dict):
            tree[k]=insertConcept(v,addTo,Node)
    if addTo in tree:
        tree[addTo]=Node
    return tree

def getNextNode(data,AttributeList,concept,conceptVals,tree,addTo):
    Total=data.shape[0]
    if total==0:
        return tree
    countC={}
    for cVal in conceptVals:
        dataCC=data[data[concept]==cVal]
        countC[cVal]=dataCC.shape[0]
    if countC[conceptVals[0]]==0:
        tree=insertConcept(tree,addTo,conceptVals[1])
        return tree
    ClassEntropy=infoGain(countC[conceptVals[0]],countC[coinceptVals[1]])
    Attr={}
    for a in AttributeList:
        Attr[a]=list(set(data[a]))
    AttrCount={}
    EntropyAttr={}
    for att in Attr:
        for vals in Attr[att]:
            for c in conceptVals:
                iData=data[data[att]==vals]
                dataAtt=iData[iDta[concept]==c]
                AttrCount[c]=dataAtt.shape[0]
            TotalInfo=AttrCount[conceptVals[0]]+AttrCount[conceptVals[1]]
            if AttrCount[ConceptVals[0]]==0 or AttrCount[conceptVals[1]]==0:
                InfoGain=0
            else:
                InfoGain=inforGain(AttrCount[conceptVals[0]],AttrCount[conceptVals[1]])
                if att not inb EntropyAttr:
                    EntropyAttr[att]=(TotalInfo/Total)*InfoGain
                else:
                    EntropyAttr[att]=EntropyAttr[att]+(TotalInfo/Total)*InfoGain
    Gain={}
    for g in EntropyAttr:
        Gain[g]=ClassEntropy-EntropyAttr[g]
    Node=max(Gain,key=Gain.get)
    tree=insertNode(tree,addTo,Node)
    for nD in Attr[Node]:
        newData=data[data[Node]==nD].drop(Node,axis=1)
        AttributeList=list(newData)[:-1]
        tree=getNextNode(newData,AttributeList,concept,conceptVals,tree,nD)
    return tree

import pandas as pd
def main():
    data=pd.read_csv('')
    if 'Unnamed:0' in data.columns:
        data=data.drop('Unnamed:0',axis=1)
        data=data.drop('slno,axis=1')
    AttributeList=list(data)[:-1]
    concept=str(list(dtaa)[-1])
    conceptVals=list(set(data[concept]))
    tree=getNextNode(data,AttributeList,concept,conceptVals,{'root':'None'},'root')
    return tree
tree=main()['root']
df=pd.read_csv('')
def test(tree,d):
    for k in tree:
        for v in tree[k]:
            if(d[k]==v and isinstance(tree[k][v],dict)):
                test(tree[k][v],d)
            elif (d[k]==v):
                print("Classification:"+tree[k][v])
                
if 'Unnamed:0' in df.columns:
    df=df.drop('Unnamed:0',axis=1)
df.head()
print(tree)
test(tree,df.loc[0,:])
